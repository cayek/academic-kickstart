# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+TITLE: Du /Machine Learning/ en Production
#+AUTHOR: Kévin CAYE
#+LANGUAGE: fr

# reveal options: see https://github.com/yjwen/org-reveal
#+REVEAL_ROOT: ../js/reveal.js/
#+REVEAL_TRANS: none
#+REVEAL_PLUGINS: (highlight notes)
#+OPTIONS: reveal_center:nil reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil toc:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 1 ## all header on same lvl
#+REVEAL_SPEED: fast
#+REVEAL_EXTRA_CSS: ./extra.css
#+REVEAL_EXTRA_JS:


#+BEGIN_SRC emacs-lisp :eval no-export :exports none
(execute-kbd-macro "\C-c\C-evv")
#+END_SRC

#+RESULTS:

* Qui je suis ?
- Ancien Ensimag (promotion 2014)
- Thèse en méthodes statistiques appliquées à la génétique
- /Data scientist/

#+BEGIN_NOTES
- Donc pour moi le génie logiciel c'est un outils ! j'ai vaguement abbordé
  ca à l'ensimag ....
- Mais c'est indispensable dans mon travail
#+END_NOTES
* Plan et objectifs

*Objectifs*

Répondre aux questions:
- Comment développer un logiciel qui utilise du /machine learning/ ❓
- Comment déployer une solution logiciel utilisant un modèle d'intelligence
  artificiel en production ❓

*Plan*

1. Du développement à la production
2. Un Exemple

#+BEGIN_NOTES
On va faire un zoom sur la production : car sans production pas d'utilité de la
solution ! Du moins pour le client ! Donc la production et les utilisateur
finaux doivent toujours être gardé en tète !
#+END_NOTES

* Du développement à la production
** /Machine learning/
*Une définition pour un informaticien*

#+begin_quote
Machine Learning is the science (and art) of programming computers so they can
learn from data.
#+end_quote

#+ATTR_REVEAL: :frag (appear)
*Quant utiliser le /machine learning/*
#+ATTR_REVEAL: :frag (appear)
- les problèmes résolus en énumérant un grand nombre de règles
- les problèmes très complexes ou trouver toutes les règles serait impossible
- les problèmes ou les règles peuvent changer, ou il faut s'adapter à de
  nouvelles données

*** Exemple: approche traditionnelle d'un filtre anti-spam
#+HTML: <img src="./figures/traditional_workflow.png" align="middle">
*** Exemple: approche /Machine Learning/ d'un filtre anti-spam
#+HTML: <img src="./figures/ml_workflow.png" align="middle">
** Le /Machine Learning/ prend très peu de place dans un projet

#+HTML: <img src="./figures/ml_system.jpg" align="middle">

#+ATTR_REVEAL: :frag (appear)

En quoi le /Machine Learning/ complique le développement logiciel ?

#+BEGIN_NOTES
- ml représente une petite partie du système complet !
- le premier déploiement peut être simple
- par contre si on pense pas le système complet la dette technique arrive avec
  - la maintenance
  - la mise a jours des modèles
  - le monitoring des modèle

ref: [[https://christophergs.github.io/machine%2520learning/2019/03/17/how-to-deploy-machine-learning-models/][1. Why are ML Systems Hard?]]
#+END_NOTES
** Les trois axes de changement dans un projets /Machine Learning/

#+HTML: <img src="./figures/ml-axis-of-change.png" align="middle">

#+BEGIN_NOTES
En plus du code les données utilisé pour entraîner le modèle ainsi que les choix
de modèle peuvent changer. Nos système doivent être capable de stocké et
versionner les données et les modèle.

ref: [[https://martinfowler.com/articles/cd4ml.html?utm_campaign=Data_Elixir&utm_medium=email&utm_source=Data_Elixir_250#ml-axis-of-change.png][the 3 axis of change in a Machine Learning application]]
#+END_NOTES

** La dépendance au données coûte plus chère que la dépendance au code

#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">

#+HTML: <img src="./figures/xkcd_data.png" align="middle">

#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">

#+ATTR_REVEAL: :frag (appear)
1. Il existe des outils pour détecter la dépendance au code, pas pour les
   données
2. Les données sont en perpétuel changement
3. On peut avoir des boucles d'interaction caché

#+REVEAL_HTML: </div>

#+BEGIN_NOTES
1.
2. exemple de la prédiction de l'immobilier
3. par exemple un system qui prédit le prix du mobilier peut influencé le prix
   du mobilier, sauf qu'il utilise le prix du mobilier pour construire ses modèles

cite:sculley2015hidden
#+END_NOTES

** La production
#+HTML: <img src="./figures/mem_prod.png" align="middle">

#+BEGIN_NOTES
La production c'est rendre notre système disponible accessible aux client !

Pour comprendre la complexité des projet de Machine Learning il faut parler des
étapes importantes de la production.
#+END_NOTES
** Un exemple simple de mise en production d'un modèle

#+HTML: <img src="./figures/team0.png" align="middle">

#+BEGIN_NOTES
C'est l'exemple le plus simple ou on entraîne un fois le modèle et on le
déploie.
#+END_NOTES
** Qu'est ce qu'on déploie ?
#+ATTR_REVEAL: :frag (appear)
1. *Le modèle entraîné sérialisé*
  #+BEGIN_SRC python
  model = load("model.pkl")
  #+END_SRC
2. *Le code pour faire la prédiction:*
  #+BEGIN_SRC python
  def predict(data):
      return model.predict(data)
  #+END_SRC

** Comment on le déploie ?
#+HTML: <img src="./figures/monolithic_vs_microservice.png" align="middle">

#+BEGIN_NOTES
D'un coté on a un architecture micro service contre monolitique.

On a coutume de faire des micro service
#+END_NOTES
** TODO Déploiement du modèle comme un /Web Service/
** Les modèles                                                  :noexport:

#+begin_quote
*Dans un système complexes les modèles*
1. sont influencés par les nouvelles données
2. sont compliqués a couplés et étendre
3. ont des interaction complexe entre eux
#+end_quote

#+BEGIN_NOTES
Par exemple:
1. exemple de google traduction
2. un modèle qui reconnaît des image et un modèle devine la suite de la phrase ne
   donne pas un modèle qui écrit des légende d'image
3. exemple d'un modèle de prédiction de la météo et de prédiction de la
   consonassions d'un bâtiment. L'erreur du model1 doit être connu et elle est
   importante lors de l'apprentissage !

Donc on a un problème avec un des principe de base en génie logiciel: le
découplage.
#+END_NOTES
** L'équipe

#+HTML: <img src="./figures/team_silo.png" align="middle">

#+begin_notes
Donc ce genre de pratique fait appel a beaucoup de compétences
#+end_notes
** La culture /DevOps/

#+HTML: <img src="./figures/devops.png" align="middle">

#+begin_notes
Afin de réunir toutes ses compétences il y a une facon d'organisé les équipe
basé sur la culture devops.

DevOps vient de la contraction de dévelopement - opération. L'idée est de faire
tout dans la mème équipe. On brise les silo et donc une un but précis on est
meilleur.
#+end_notes
** TODO Une équipe pluridisciplinaire

mettre les slides de l'an dernier
** TODO Valider un modèle


#+begin_notes
Il faut une très grande rigueur dans la reproduction
#+end_notes
** Reproduire l'entraînement du modèle
#+HTML: <img src="./figures/ml-pipeline-1.png" align="middle">

#+begin_notes
Il faut une très grande rigueur dans la reproduction du l'entrainement. Car on
peut avoir a mettre a le modèle !

On peut vouloir comparer les modèles entre eux.
#+end_notes
** TODO Mettre à jour un modèle en production
*** Canary deploiment
*** BlueGreen deploiment
** TODO Tester un nouveau modèle avant de le déployer
*** A/B test
** TODO Un processus de deploiment continue pour le /Machine Learning/

d'après citer

** Les points clés de la production                               :noexport:
:LOGBOOK:
- Note taken on [2019-12-17 mar. 12:56] \\
  définir les concepts du tableau après
:END:

*** Entraînement du modèle
- offline par un data scientiste
- Tous les jours à heure fixe
- Sur un flux de données
*** Prédiction du modèle
- Tous les jours à heure fixe
- A la demande d'un utilisateur
- Sur un flux de données
*** Gestion du système
- Mesure les performances du modèle
  - prédiction (precision du modèle)
  - métier (indicateur metier)
- Mesure de la qualité des données entrantes, est ce que les données entrantes dérivent ?
*** Mise à jour du système
- Comment déployer un nouveau modèle ?
- Quand déployer un nouveau modèle ?
** Quelques architectures d'une application /Machine Learning/    :noexport:

|--------------+------------+--------------+----------------------|
| /            | <          |              | >                    |
|              | BD partagé | Rest Api     | Streaming            |
|--------------+------------+--------------+----------------------|
| Entraînement | Batch      | Batch        | Streaming            |
|--------------+------------+--------------+----------------------|
| Prédiction   | Batch      | A la demande | Streaming            |
|--------------+------------+--------------+----------------------|
| Exemple      | météo      | pub en ligne | Detection de fraudes |
|--------------+------------+--------------+----------------------|

#+BEGIN_NOTES
- Rest api
- Streaming:
  - necessite des techno qui gère des flux de données come Kafka
  - a chaque fraude/faute detecté quand on a le feedback on peut réentréner le
    modèle pour s'adaptéer à la situation
#+END_NOTES
*** Un exemple d'architecture
#+HTML: <img src="./figures/example_architecture.jpg" align="middle">
** Une pipeline de travail pour un projet Machine Learning        :noexport:
#+HTML: <img src="./figures/ml_gl_workflow.png" align="middle" width="140%">

#+BEGIN_NOTES
Maintenant qu'on a dit tous ca comment on travail sur un projet data science. On
peut essayer de se donner un workflow.

Mais c'est pas suffisent.

Faire du machine learning c'est bien mais si ca ne va jamais en production ca ne
sert a rien ! Il faut donc bien comprendre ce qu'est la production.

cite:amershi2019software
#+END_NOTES

** TODO Quelques /Anti-Pattern/ cite:sculley2015hidden
*** /Glue Code/
*Desciption*
- On utilise des solutions génériques pour faire en /machine learning/ (exemple:
  /sklearn/, /keras/)
- On code pour faire marcher différentes briques ensembles

*Problèmes*
- Système est gélé, on ne veux pas tester d'autre alternative

*Une solution ?*
- Développer la solution complète peut être moins couteaux
*** /Pipeline Jungles/
* Un exemple                                                       :noexport:

#+BEGIN_NOTES
Ce n'est pas du tout une méthode systématique pour consevoir, c'est juste
l'étude d'un cas concret (Schneider Electric).

Je vous exposer le problème technique, les contraintes et comment ils ont
répondu au problème.
#+END_NOTES

** La problématique
#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">

#+HTML: <img src="./figures/smart_building.jpg" align="middle">

#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">

#+ATTR_REVEAL: :frag (appear)
- 40% de l'energy modial est dépensé dans les batiments
- optimization de la consomation energétique (energie renouvlable, batterie)
- la première étape est de pouvoir *prédire la consomation d'un batiment*
#+REVEAL_HTML: </div>

#+BEGIN_NOTES
On pose le decors. On S'attend a ce que les batiment de demain embarque du
machine learning !

Etre capable de prédire la consommation est la première étape.
#+END_NOTES

** Le contexte                                                    :noexport:

#+ATTR_REVEAL: :frag (appear)
1. Équipe de R&D qui historiquement fait propose des prototype qui démondre une
   faisabilité.
2. Les clients ?
   - d'autres equipes de l'entreprise
   - des exterieurs à l'entreprise

#+BEGIN_NOTES
1. donc l'équipe n'est pas habitué à dévelloper des logiciels, à mettre en
   production
2. Questions très importante ! pourquoi on fait ca ?
   - pour intégrer notre system dans une solution plus grande, on connait un peu
     leur solution, on peut envisager un acompgnement
   - pour en faire ce qu'ils veulent ! on rentre en concurence avec plein de
     personne. En gros si on veux que ca se vendent ca à interet à etre bon !
#+END_NOTES

** Comment valider ?
** Comment déployer ?
** Comment surveiller ?
** Comment faire évoluer ?
** Comment faire de l'intégration/déploiement continue ?
* Conclusion
* Références
- cite:geron2017hands
- cite:amershi2019software
- cite:sculley2015hidden
- [[https://blog.acolyer.org/2019/07/08/software-engineering-for-machine-learning/][Morning paper: Software engineering for machine learning: a case study]]
- [[https://martinfowler.com/articles/cd4ml.html?utm_campaign=Data_Elixir&utm_medium=email&utm_source=Data_Elixir_250][Continuous Delivery for Machine Learning]]
- [[https://fr.slideshare.net/turi-inc/machine-learning-in-production][Machine learning in production]]
- [[https://docs.oracle.com/fr/solutions/learn-architect-microservice/index.html#GUID-1A9ECC2B-F7E6-430F-8EDA-911712467953][Différences entre les microservices et l'architecture unilithic]]

#+REVEAL: split
bibliography:~/bibliotheque/bibliotheque.bib
